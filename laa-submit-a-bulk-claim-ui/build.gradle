plugins {
    id 'io.freefair.lombok' version '8.14'
    id("com.diffplug.spotless") version "7.2.1"
}

apply plugin: 'uk.gov.laa.springboot.laa-spring-boot-gradle-plugin'

        repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencyManagement {
    imports {
        // Upgrade to fix vulnerabilities in netty
        mavenBom('io.netty:netty-bom:4.2.5.Final')

        // Upgrade Spring Security to patched version
        mavenBom "org.springframework.security:spring-security-bom:6.5.4"
    }
}

dependencies {
    /**
     * Upgrades to resolve vulnerabilities
     */
    // Upgrade to fix CVE-2025-48924
    implementation 'org.apache.commons:commons-lang3:3.18.0'
    // Upgrade to fix vulnerabilities in spring-core
    implementation 'org.springframework:spring-core:6.2.11'
    // Upgrade to fix CVE-2025-11226 vulnerability in logback-core
    implementation 'ch.qos.logback:logback-core:1.5.19'

    implementation 'uk.gov.justice.laa.datastewardship.payments:data-claims-api-models:326b3c0'

    //Common exception handling
    implementation 'uk.gov.laa.springboot:laa-spring-boot-starter-application-exception'

    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.reactivestreams:reactive-streams:1.0.4'

    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.3.RELEASE'

    // Front end
    // https://mvnrepository.com/artifact/org.webjars/webjars-locator-lite
    implementation 'org.webjars:webjars-locator-lite'
    // https://mvnrepository.com/artifact/org.webjars.npm/govuk-frontend
    implementation 'org.webjars.npm:govuk-frontend:5.13.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    testImplementation 'org.testcontainers:mockserver:1.21.3'
    testImplementation 'org.mock-server:mockserver-client-java:5.15.0'
}

test {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/BulkUploadApplication.class', '**/*Config.class', '**/*Dto.class'])
        }))
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/BulkUploadApplication.class', '**/*Config.class', '**/*Dto.class'])
        }))
    }

    violationRules {
        /*CwaUploadService fails this check, but due to how the tests have been written. This class
            will be removed in the future so for the time being I have disabled this until the
            codebase has been fleshed out.*/
        failOnViolation = false

        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                minimum = 0.75
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

spotless {
    java {
        target 'src/*/java/**/*.java'
        importOrder()
        removeUnusedImports()
        cleanthat()
        googleJavaFormat()
    }
}

tasks.compileJava {
    options.compilerArgs.addAll(['-Xlint:deprecation', '-Xlint:unchecked'])
}