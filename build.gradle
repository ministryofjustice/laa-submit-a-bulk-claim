plugins {
    id 'net.researchgate.release' version '3.1.0'
    id 'uk.gov.laa.springboot.laa-spring-boot-gradle-plugin' version '1.0.0'
    id 'io.freefair.lombok' version '8.14'
    id("com.diffplug.spotless") version "7.2.1"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation project(':claims-api-reference')

    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.reactivestreams:reactive-streams:1.0.4'

    implementation 'org.apache.tomcat.embed:tomcat-embed-core:11.0.9'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.3.RELEASE'

    // Front end
    // https://mvnrepository.com/artifact/org.webjars/webjars-locator-lite
    implementation 'org.webjars:webjars-locator-lite'
    // https://mvnrepository.com/artifact/org.webjars.npm/govuk-frontend
    implementation 'org.webjars.npm:govuk-frontend:5.11.0'
    implementation 'org.webjars.npm:ministryofjustice__frontend:5.1.5'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

test {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/BulkUploadApplication.class', '**/*Config.class', '**/*Dto.class'])
        }))
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/BulkUploadApplication.class', '**/*Config.class', '**/*Dto.class'])
        }))
    }

    violationRules {
        /*CwaUploadService fails this check, but due to how the tests have been written. This class
            will be removed in the future so for the time being I have disabled this until the
            codebase has been fleshed out.*/
        failOnViolation = false

        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                minimum = 0.75
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

spotless {
    java {
        target 'src/*/java/**/*.java'
        importOrder()
        removeUnusedImports()
        cleanthat()
        googleJavaFormat()
    }
}